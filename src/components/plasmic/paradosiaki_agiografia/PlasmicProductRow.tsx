// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: poSKmt1KMDoYUF6h3Y78GP
// Component: FaWqiAMedvRmIf

import * as React from "react";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/react-web/lib/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";

import { useScreenVariants as useScreenVariantsgW35LCmK5FyoDz } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: gW35LCmK5FYODz/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_library_plasmic_color_type_css from "../library_plasmic_color_type/plasmic_library_plasmic_color_type.module.css"; // plasmic-import: seaQhLVS4bbjiGvJJrRwyL/projectcss
import projectcss from "./plasmic_paradosiaki_agiografia.module.css"; // plasmic-import: poSKmt1KMDoYUF6h3Y78GP/projectcss
import sty from "./PlasmicProductRow.module.css"; // plasmic-import: FaWqiAMedvRmIf/css

import εικόναViber20230528192332391Jpg2L3TeBNax from "./images/\u03B5\u03B9\u03BA\u03CC\u03BD\u03B1Viber20230528192332391Jpg.jpg"; // plasmic-import: 2L3teBNax/picture
import εικόναViber20230528192330365JpgZhozbqtj9 from "./images/\u03B5\u03B9\u03BA\u03CC\u03BD\u03B1Viber20230528192330365Jpg.jpg"; // plasmic-import: ZHOZBQTJ9/picture
import εικόναViber20230528192332932JpgFgOp2KTqb from "./images/\u03B5\u03B9\u03BA\u03CC\u03BD\u03B1Viber20230528192332932Jpg.jpg"; // plasmic-import: FGOp2KTqb/picture
import εικόναViber20230528192315649Jpg1KzxUxE9 from "./images/\u03B5\u03B9\u03BA\u03CC\u03BD\u03B1Viber20230528192315649Jpg.jpg"; // plasmic-import: 1Kzx-uxE9/picture

export type PlasmicProductRow__VariantMembers = {};
export type PlasmicProductRow__VariantsArgs = {};
type VariantPropType = keyof PlasmicProductRow__VariantsArgs;
export const PlasmicProductRow__VariantProps = new Array<VariantPropType>();

export type PlasmicProductRow__ArgsType = {};
type ArgPropType = keyof PlasmicProductRow__ArgsType;
export const PlasmicProductRow__ArgProps = new Array<ArgPropType>();

export type PlasmicProductRow__OverridesType = {
  root?: p.Flex<"div">;
};

export interface DefaultProductRowProps {
  className?: string;
}

const __wrapUserFunction =
  globalThis.__PlasmicWrapUserFunction ?? ((loc, fn) => fn());
const __wrapUserPromise =
  globalThis.__PlasmicWrapUserPromise ??
  (async (loc, promise) => {
    return await promise;
  });

function PlasmicProductRow__RenderFunc(props: {
  variants: PlasmicProductRow__VariantsArgs;
  args: PlasmicProductRow__ArgsType;
  overrides: PlasmicProductRow__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);
  const $props = {
    ...args,
    ...variants
  };
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = p.useCurrentUser?.() || {};

  const [$queries, setDollarQueries] = React.useState({});

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsgW35LCmK5FyoDz()
  });

  return (
    true ? (
      <p.Stack
        as={"div"}
        data-plasmic-name={"root"}
        data-plasmic-override={overrides.root}
        data-plasmic-root={true}
        data-plasmic-for-node={forNode}
        hasGap={true}
        className={classNames(
          projectcss.all,
          projectcss.root_reset,
          projectcss.plasmic_default_styles,
          projectcss.plasmic_mixins,
          projectcss.plasmic_tokens,
          plasmic_library_plasmic_color_type_css.plasmic_tokens,
          sty.root
        )}
      >
        <p.Stack
          as={"div"}
          hasGap={true}
          className={classNames(projectcss.all, sty.column___3GvG7)}
        >
          <p.PlasmicImg
            alt={""}
            className={classNames(sty.img__uVhj4)}
            displayHeight={"270px /* plasmic-token: PE1QFaZ5ZFDg60 */" as const}
            displayMaxHeight={"none" as const}
            displayMaxWidth={"100%" as const}
            displayMinHeight={"0" as const}
            displayMinWidth={"0" as const}
            displayWidth={"100%" as const}
            loading={"lazy" as const}
            src={{
              src: εικόναViber20230528192332391Jpg2L3TeBNax,
              fullWidth: 1200,
              fullHeight: 1600,
              aspectRatio: undefined
            }}
          />

          <div className={classNames(projectcss.all, sty.freeBox__xtKNe)}>
            <a
              className={classNames(
                projectcss.all,
                projectcss.a,
                projectcss.__wab_text,
                sty.link__epi81
              )}
            >
              {"Ιησούς Χριστός"}
            </a>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__rb9B6
              )}
            >
              {"ΛΙΓΑ ΛΟΓΙΑ"}
            </div>
          </div>
        </p.Stack>
        <p.Stack
          as={"div"}
          hasGap={true}
          className={classNames(projectcss.all, sty.column__fsOoG)}
        >
          <p.PlasmicImg
            alt={""}
            className={classNames(sty.img__cHkyl)}
            displayHeight={"270px /* plasmic-token: PE1QFaZ5ZFDg60 */" as const}
            displayMaxHeight={"none" as const}
            displayMaxWidth={"100%" as const}
            displayMinHeight={"0" as const}
            displayMinWidth={"0" as const}
            displayWidth={"100%" as const}
            loading={"lazy" as const}
            src={{
              src: εικόναViber20230528192330365JpgZhozbqtj9,
              fullWidth: 1200,
              fullHeight: 1600,
              aspectRatio: undefined
            }}
          />

          <div className={classNames(projectcss.all, sty.freeBox__kFk2E)}>
            <a
              className={classNames(
                projectcss.all,
                projectcss.a,
                projectcss.__wab_text,
                sty.link__wyx0N
              )}
            >
              {"O Άρχων Μιχαήλ"}
            </a>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__eUhs
              )}
            >
              {"ΛΙΓΑ ΛΟΓΙΑ"}
            </div>
          </div>
        </p.Stack>
        <p.Stack
          as={"div"}
          hasGap={true}
          className={classNames(projectcss.all, sty.column__hk3Fs)}
        >
          <p.PlasmicImg
            alt={""}
            className={classNames(sty.img__alQhY)}
            displayHeight={"270px /* plasmic-token: PE1QFaZ5ZFDg60 */" as const}
            displayMaxHeight={"none" as const}
            displayMaxWidth={"100%" as const}
            displayMinHeight={"0" as const}
            displayMinWidth={"0" as const}
            displayWidth={"100%" as const}
            loading={"lazy" as const}
            src={{
              src: εικόναViber20230528192332932JpgFgOp2KTqb,
              fullWidth: 1200,
              fullHeight: 1600,
              aspectRatio: undefined
            }}
          />

          <div className={classNames(projectcss.all, sty.freeBox__qNiyW)}>
            <a
              className={classNames(
                projectcss.all,
                projectcss.a,
                projectcss.__wab_text,
                sty.link__zaEMf
              )}
            >
              {"O Άγιος Ιωάννης Ο Ρώσσος"}
            </a>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__y8Kbn
              )}
            >
              {"ΛΙΓΑ ΛΟΓΙΑ"}
            </div>
          </div>
        </p.Stack>
        <p.Stack
          as={"div"}
          hasGap={true}
          className={classNames(projectcss.all, sty.column__gzjVs)}
        >
          <p.PlasmicImg
            alt={""}
            className={classNames(sty.img__fovXc)}
            displayHeight={"270px /* plasmic-token: PE1QFaZ5ZFDg60 */" as const}
            displayMaxHeight={"none" as const}
            displayMaxWidth={"100%" as const}
            displayMinHeight={"0" as const}
            displayMinWidth={"0" as const}
            displayWidth={"100%" as const}
            loading={"lazy" as const}
            src={{
              src: εικόναViber20230528192315649Jpg1KzxUxE9,
              fullWidth: 1200,
              fullHeight: 1600,
              aspectRatio: undefined
            }}
          />

          <div className={classNames(projectcss.all, sty.freeBox__yNoDe)}>
            <a
              className={classNames(
                projectcss.all,
                projectcss.a,
                projectcss.__wab_text,
                sty.link__y9QDr
              )}
            >
              {"O Άγιος Νικόλαος"}
            </a>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__u3IAg
              )}
            >
              {"ΛΙΓΑ ΛΟΓΙΑ"}
            </div>
          </div>
        </p.Stack>
      </p.Stack>
    ) : null
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicProductRow__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicProductRow__VariantsArgs;
    args?: PlasmicProductRow__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicProductRow__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicProductRow__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicProductRow__ArgProps,
          internalVariantPropNames: PlasmicProductRow__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicProductRow__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicProductRow";
  } else {
    func.displayName = `PlasmicProductRow.${nodeName}`;
  }
  return func;
}

export const PlasmicProductRow = Object.assign(
  // Top-level PlasmicProductRow renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements

    // Metadata about props expected for PlasmicProductRow
    internalVariantProps: PlasmicProductRow__VariantProps,
    internalArgProps: PlasmicProductRow__ArgProps
  }
);

export default PlasmicProductRow;
/* prettier-ignore-end */
