// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: poSKmt1KMDoYUF6h3Y78GP
// Component: HagOdd05IW3mVN

import * as React from "react";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/react-web/lib/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import MenuButton from "../../MenuButton"; // plasmic-import: 3IYrK-BAkdyFM-/component

import { useScreenVariants as useScreenVariantsgW35LCmK5FyoDz } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: gW35LCmK5FYODz/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_library_plasmic_color_type_css from "../library_plasmic_color_type/plasmic_library_plasmic_color_type.module.css"; // plasmic-import: seaQhLVS4bbjiGvJJrRwyL/projectcss
import projectcss from "./plasmic_paradosiaki_agiografia.module.css"; // plasmic-import: poSKmt1KMDoYUF6h3Y78GP/projectcss
import sty from "./PlasmicFaqFooter.module.css"; // plasmic-import: HagOdd05IW3mVN/css

import LocationSvgrepoCom1SvgIcon from "./icons/PlasmicIcon__LocationSvgrepoCom1Svg"; // plasmic-import: QiUB2iFrqDBwwz/icon
import LogoWhitesvgIcon from "./icons/PlasmicIcon__LogoWhitesvg"; // plasmic-import: _Lzag9I0QwGeoY/icon
import promowebpSLwZ7MBgKpEthv from "./images/promowebp.webp"; // plasmic-import: sLwZ7MBgKpETHV/picture

export type PlasmicFaqFooter__VariantMembers = {};
export type PlasmicFaqFooter__VariantsArgs = {};
type VariantPropType = keyof PlasmicFaqFooter__VariantsArgs;
export const PlasmicFaqFooter__VariantProps = new Array<VariantPropType>();

export type PlasmicFaqFooter__ArgsType = {};
type ArgPropType = keyof PlasmicFaqFooter__ArgsType;
export const PlasmicFaqFooter__ArgProps = new Array<ArgPropType>();

export type PlasmicFaqFooter__OverridesType = {
  root?: p.Flex<"div">;
  img?: p.Flex<typeof p.PlasmicImg>;
  h1?: p.Flex<"h1">;
  menuButton?: p.Flex<typeof MenuButton>;
};

export interface DefaultFaqFooterProps {
  className?: string;
}

const __wrapUserFunction =
  globalThis.__PlasmicWrapUserFunction ?? ((loc, fn) => fn());
const __wrapUserPromise =
  globalThis.__PlasmicWrapUserPromise ??
  (async (loc, promise) => {
    return await promise;
  });

function PlasmicFaqFooter__RenderFunc(props: {
  variants: PlasmicFaqFooter__VariantsArgs;
  args: PlasmicFaqFooter__ArgsType;
  overrides: PlasmicFaqFooter__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);
  const $props = {
    ...args,
    ...variants
  };
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = p.useCurrentUser?.() || {};

  const [$queries, setDollarQueries] = React.useState({});

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsgW35LCmK5FyoDz()
  });

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_library_plasmic_color_type_css.plasmic_tokens,
        sty.root
      )}
    >
      {true ? (
        <div className={classNames(projectcss.all, sty.freeBox__xTfg)}>
          <div className={classNames(projectcss.all, sty.columns__bOyrz)}>
            <div className={classNames(projectcss.all, sty.column__muA9A)}>
              <p.PlasmicImg
                data-plasmic-name={"img"}
                data-plasmic-override={overrides.img}
                alt={""}
                className={classNames(sty.img)}
                displayHeight={"562px" as const}
                displayMaxHeight={"none" as const}
                displayMaxWidth={"100%" as const}
                displayMinHeight={"0" as const}
                displayMinWidth={"0" as const}
                displayWidth={"947px" as const}
                loading={"lazy" as const}
                src={{
                  src: promowebpSLwZ7MBgKpEthv,
                  fullWidth: 720,
                  fullHeight: 525,
                  aspectRatio: undefined
                }}
              />
            </div>
            <p.Stack
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.column___7UUx1)}
            >
              <h1
                data-plasmic-name={"h1"}
                data-plasmic-override={overrides.h1}
                className={classNames(
                  projectcss.all,
                  projectcss.h1,
                  projectcss.__wab_text,
                  sty.h1
                )}
              >
                {hasVariant(globalVariants, "screen", "mobile")
                  ? "Behold our FAQ"
                  : "Still have questions?\nContact us. "}
              </h1>
              <div className={classNames(projectcss.all, sty.columns___43Vq2)}>
                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.column__rTJt)}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text___11Ihf
                    )}
                  >
                    {hasVariant(globalVariants, "screen", "mobile")
                      ? "Behold our FAQ"
                      : "226 rue St-Joseph E, \nQu√©bec, QC, Canada, \nG1K 3A9"}
                  </div>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__nPx3E
                    )}
                  >
                    {hasVariant(globalVariants, "screen", "mobile")
                      ? "Behold our FAQ"
                      : "+1-202-555-0112"}
                  </div>
                </p.Stack>
                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.column__yFMwb)}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__znN4
                    )}
                  >
                    {hasVariant(globalVariants, "screen", "mobile")
                      ? "Behold our FAQ"
                      : "geeks@snipcart.com"}
                  </div>
                  {(
                    hasVariant(globalVariants, "screen", "mobile") ? true : true
                  ) ? (
                    <div
                      className={classNames(projectcss.all, sty.freeBox__weDy9)}
                    >
                      {(
                        hasVariant(globalVariants, "screen", "mobile")
                          ? true
                          : true
                      ) ? (
                        <p.Stack
                          as={"a"}
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            projectcss.a,
                            sty.link___1KBEi
                          )}
                        >
                          <LocationSvgrepoCom1SvgIcon
                            className={classNames(
                              projectcss.all,
                              sty.svg___3CEuy
                            )}
                            role={"img"}
                          />

                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__llywH
                            )}
                          >
                            {hasVariant(globalVariants, "screen", "mobile")
                              ? "Discover"
                              : "On the map"}
                          </div>
                        </p.Stack>
                      ) : null}
                    </div>
                  ) : null}
                </p.Stack>
                <div
                  className={classNames(projectcss.all, sty.column__p4KoZ)}
                />
              </div>
            </p.Stack>
          </div>
        </div>
      ) : null}
      {true ? (
        <div className={classNames(projectcss.all, sty.freeBox__xlRT)}>
          <p.Stack
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox___1Nq8W)}
          >
            <p.Stack
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox___7EasQ)}
            >
              {(
                hasVariant(globalVariants, "screen", "mobile") ? true : true
              ) ? (
                <MenuButton
                  data-plasmic-name={"menuButton"}
                  data-plasmic-override={overrides.menuButton}
                  className={classNames("__wab_instance", sty.menuButton)}
                />
              ) : null}
              {true ? (
                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__rpXw8)}
                >
                  <LogoWhitesvgIcon
                    className={classNames(projectcss.all, sty.svg__nwuUr)}
                    role={"img"}
                  />

                  <a
                    className={classNames(
                      projectcss.all,
                      projectcss.a,
                      projectcss.__wab_text,
                      sty.link__aMfw1
                    )}
                    href={"#" as const}
                  >
                    {"Store"}
                  </a>
                  <a
                    className={classNames(
                      projectcss.all,
                      projectcss.a,
                      projectcss.__wab_text,
                      sty.link__sRf8P
                    )}
                    href={"#" as const}
                  >
                    {"About"}
                  </a>
                  <a
                    className={classNames(
                      projectcss.all,
                      projectcss.a,
                      projectcss.__wab_text,
                      sty.link__bcVUf
                    )}
                    href={"#" as const}
                  >
                    {"Faq"}
                  </a>
                </p.Stack>
              ) : null}
              <div className={classNames(projectcss.all, sty.freeBox__z90Hz)}>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text___9FJP
                  )}
                >
                  {
                    "¬© Company. All rights reserved. This site proudly built with "
                  }
                </div>
                <a
                  className={classNames(
                    projectcss.all,
                    projectcss.a,
                    projectcss.__wab_text,
                    sty.link__oPknj
                  )}
                  href={"https://www.plasmic.app/" as const}
                >
                  {"Plasmic"}
                </a>
              </div>
            </p.Stack>
          </p.Stack>
        </div>
      ) : null}
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "img", "h1", "menuButton"],
  img: ["img"],
  h1: ["h1"],
  menuButton: ["menuButton"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  img: typeof p.PlasmicImg;
  h1: "h1";
  menuButton: typeof MenuButton;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicFaqFooter__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicFaqFooter__VariantsArgs;
    args?: PlasmicFaqFooter__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicFaqFooter__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicFaqFooter__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicFaqFooter__ArgProps,
          internalVariantPropNames: PlasmicFaqFooter__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicFaqFooter__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicFaqFooter";
  } else {
    func.displayName = `PlasmicFaqFooter.${nodeName}`;
  }
  return func;
}

export const PlasmicFaqFooter = Object.assign(
  // Top-level PlasmicFaqFooter renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    img: makeNodeComponent("img"),
    h1: makeNodeComponent("h1"),
    menuButton: makeNodeComponent("menuButton"),

    // Metadata about props expected for PlasmicFaqFooter
    internalVariantProps: PlasmicFaqFooter__VariantProps,
    internalArgProps: PlasmicFaqFooter__ArgProps
  }
);

export default PlasmicFaqFooter;
/* prettier-ignore-end */
