// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: poSKmt1KMDoYUF6h3Y78GP
// Component: RJoD3U13gzPVxR

import * as React from "react";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/react-web/lib/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_library_plasmic_color_type_css from "../library_plasmic_color_type/plasmic_library_plasmic_color_type.module.css"; // plasmic-import: seaQhLVS4bbjiGvJJrRwyL/projectcss
import projectcss from "./plasmic_paradosiaki_agiografia.module.css"; // plasmic-import: poSKmt1KMDoYUF6h3Y78GP/projectcss
import sty from "./PlasmicRatings.module.css"; // plasmic-import: RJoD3U13gzPVxR/css

import StarIcon from "./icons/PlasmicIcon__Star"; // plasmic-import: kSLvqA7p5fYPgA/icon

export type PlasmicRatings__VariantMembers = {
  stars: "zero" | "one" | "two" | "three" | "four" | "five";
};
export type PlasmicRatings__VariantsArgs = {
  stars?: SingleChoiceArg<"zero" | "one" | "two" | "three" | "four" | "five">;
};
type VariantPropType = keyof PlasmicRatings__VariantsArgs;
export const PlasmicRatings__VariantProps = new Array<VariantPropType>("stars");

export type PlasmicRatings__ArgsType = {
  numReviews?: React.ReactNode;
};
type ArgPropType = keyof PlasmicRatings__ArgsType;
export const PlasmicRatings__ArgProps = new Array<ArgPropType>("numReviews");

export type PlasmicRatings__OverridesType = {
  root?: p.Flex<"div">;
  freeBox?: p.Flex<"div">;
};

export interface DefaultRatingsProps {
  numReviews?: React.ReactNode;
  stars?: SingleChoiceArg<"zero" | "one" | "two" | "three" | "four" | "five">;
  className?: string;
}

const __wrapUserFunction =
  globalThis.__PlasmicWrapUserFunction ?? ((loc, fn) => fn());
const __wrapUserPromise =
  globalThis.__PlasmicWrapUserPromise ??
  (async (loc, promise) => {
    return await promise;
  });

function PlasmicRatings__RenderFunc(props: {
  variants: PlasmicRatings__VariantsArgs;
  args: PlasmicRatings__ArgsType;
  overrides: PlasmicRatings__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);
  const $props = {
    ...args,
    ...variants
  };
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = p.useCurrentUser?.() || {};

  const [$queries, setDollarQueries] = React.useState({});

  const stateSpecs = React.useMemo(
    () => [
      {
        path: "stars",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.stars
      }
    ],
    [$props, $ctx]
  );
  const $state = p.useDollarState(stateSpecs, { $props, $ctx, $queries });

  return (
    <p.Stack
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_library_plasmic_color_type_css.plasmic_tokens,
        sty.root,
        {
          [sty.rootstars_five]: hasVariant($state, "stars", "five"),
          [sty.rootstars_four]: hasVariant($state, "stars", "four"),
          [sty.rootstars_one]: hasVariant($state, "stars", "one"),
          [sty.rootstars_three]: hasVariant($state, "stars", "three"),
          [sty.rootstars_two]: hasVariant($state, "stars", "two"),
          [sty.rootstars_zero]: hasVariant($state, "stars", "zero")
        }
      )}
    >
      <p.Stack
        as={"div"}
        data-plasmic-name={"freeBox"}
        data-plasmic-override={overrides.freeBox}
        hasGap={true}
        className={classNames(projectcss.all, sty.freeBox)}
      >
        {(hasVariant($state, "stars", "zero") ? true : true) ? (
          <StarIcon
            className={classNames(projectcss.all, sty.svg__o2Atb, {
              [sty.svgstars_five__o2AtbmdzsP]: hasVariant(
                $state,
                "stars",
                "five"
              ),
              [sty.svgstars_zero__o2Atblawzr]: hasVariant(
                $state,
                "stars",
                "zero"
              )
            })}
            role={"img"}
          />
        ) : null}
        {(
          hasVariant($state, "stars", "five")
            ? true
            : hasVariant($state, "stars", "four")
            ? true
            : hasVariant($state, "stars", "three")
            ? true
            : hasVariant($state, "stars", "two")
            ? true
            : hasVariant($state, "stars", "one")
            ? true
            : hasVariant($state, "stars", "zero")
            ? true
            : true
        ) ? (
          <StarIcon
            className={classNames(projectcss.all, sty.svg__qGZmh, {
              [sty.svgstars_five__qGZmhmdzsP]: hasVariant(
                $state,
                "stars",
                "five"
              ),
              [sty.svgstars_four__qGZmhkuD9H]: hasVariant(
                $state,
                "stars",
                "four"
              ),
              [sty.svgstars_one__qGZmhlQjqS]: hasVariant(
                $state,
                "stars",
                "one"
              ),
              [sty.svgstars_three__qGZmhGVKm]: hasVariant(
                $state,
                "stars",
                "three"
              ),
              [sty.svgstars_two__qGZmhtjodu]: hasVariant(
                $state,
                "stars",
                "two"
              ),
              [sty.svgstars_zero__qGZmhlawzr]: hasVariant(
                $state,
                "stars",
                "zero"
              )
            })}
            role={"img"}
          />
        ) : null}
        {(
          hasVariant($state, "stars", "five")
            ? true
            : hasVariant($state, "stars", "four")
            ? true
            : hasVariant($state, "stars", "three")
            ? true
            : hasVariant($state, "stars", "two")
            ? true
            : hasVariant($state, "stars", "one")
            ? true
            : hasVariant($state, "stars", "zero")
            ? true
            : true
        ) ? (
          <StarIcon
            className={classNames(projectcss.all, sty.svg__mZjo9, {
              [sty.svgstars_five__mZjo9MdzsP]: hasVariant(
                $state,
                "stars",
                "five"
              ),
              [sty.svgstars_four__mZjo9KuD9H]: hasVariant(
                $state,
                "stars",
                "four"
              ),
              [sty.svgstars_one__mZjo9LQjqS]: hasVariant(
                $state,
                "stars",
                "one"
              ),
              [sty.svgstars_three__mZjo9GVKm]: hasVariant(
                $state,
                "stars",
                "three"
              ),
              [sty.svgstars_two__mZjo9Tjodu]: hasVariant(
                $state,
                "stars",
                "two"
              ),
              [sty.svgstars_zero__mZjo9Lawzr]: hasVariant(
                $state,
                "stars",
                "zero"
              )
            })}
            role={"img"}
          />
        ) : null}
        {(
          hasVariant($state, "stars", "five")
            ? true
            : hasVariant($state, "stars", "four")
            ? true
            : hasVariant($state, "stars", "three")
            ? true
            : hasVariant($state, "stars", "two")
            ? true
            : hasVariant($state, "stars", "one")
            ? true
            : hasVariant($state, "stars", "zero")
            ? true
            : true
        ) ? (
          <StarIcon
            className={classNames(projectcss.all, sty.svg__ggiuc, {
              [sty.svgstars_five__ggiucmdzsP]: hasVariant(
                $state,
                "stars",
                "five"
              ),
              [sty.svgstars_four__ggiuckuD9H]: hasVariant(
                $state,
                "stars",
                "four"
              ),
              [sty.svgstars_one__ggiuclQjqS]: hasVariant(
                $state,
                "stars",
                "one"
              ),
              [sty.svgstars_three__ggiucGVKm]: hasVariant(
                $state,
                "stars",
                "three"
              ),
              [sty.svgstars_two__ggiuctjodu]: hasVariant(
                $state,
                "stars",
                "two"
              ),
              [sty.svgstars_zero__ggiuclawzr]: hasVariant(
                $state,
                "stars",
                "zero"
              )
            })}
            role={"img"}
          />
        ) : null}
        {(
          hasVariant($state, "stars", "five")
            ? true
            : hasVariant($state, "stars", "four")
            ? true
            : hasVariant($state, "stars", "three")
            ? true
            : hasVariant($state, "stars", "two")
            ? true
            : hasVariant($state, "stars", "one")
            ? true
            : hasVariant($state, "stars", "zero")
            ? true
            : true
        ) ? (
          <StarIcon
            className={classNames(projectcss.all, sty.svg__d5EPt, {
              [sty.svgstars_five__d5EPTmdzsP]: hasVariant(
                $state,
                "stars",
                "five"
              ),
              [sty.svgstars_four__d5EPTkuD9H]: hasVariant(
                $state,
                "stars",
                "four"
              ),
              [sty.svgstars_one__d5EPTlQjqS]: hasVariant(
                $state,
                "stars",
                "one"
              ),
              [sty.svgstars_three__d5EPtgVKm]: hasVariant(
                $state,
                "stars",
                "three"
              ),
              [sty.svgstars_two__d5EPTtjodu]: hasVariant(
                $state,
                "stars",
                "two"
              ),
              [sty.svgstars_zero__d5EPTlawzr]: hasVariant(
                $state,
                "stars",
                "zero"
              )
            })}
            role={"img"}
          />
        ) : null}
        {(
          hasVariant($state, "stars", "five")
            ? true
            : hasVariant($state, "stars", "four")
            ? true
            : hasVariant($state, "stars", "three")
            ? true
            : hasVariant($state, "stars", "two")
            ? true
            : hasVariant($state, "stars", "one")
            ? true
            : hasVariant($state, "stars", "zero")
            ? true
            : true
        ) ? (
          <StarIcon
            className={classNames(projectcss.all, sty.svg__j5Xgq, {
              [sty.svgstars_five__j5XgQmdzsP]: hasVariant(
                $state,
                "stars",
                "five"
              ),
              [sty.svgstars_four__j5XgQkuD9H]: hasVariant(
                $state,
                "stars",
                "four"
              ),
              [sty.svgstars_one__j5XgQlQjqS]: hasVariant(
                $state,
                "stars",
                "one"
              ),
              [sty.svgstars_three__j5XgqgVKm]: hasVariant(
                $state,
                "stars",
                "three"
              ),
              [sty.svgstars_two__j5XgQtjodu]: hasVariant(
                $state,
                "stars",
                "two"
              ),
              [sty.svgstars_zero__j5XgQlawzr]: hasVariant(
                $state,
                "stars",
                "zero"
              )
            })}
            role={"img"}
          />
        ) : null}
        {(
          hasVariant($state, "stars", "five")
            ? true
            : hasVariant($state, "stars", "four")
            ? true
            : hasVariant($state, "stars", "three")
            ? true
            : hasVariant($state, "stars", "two")
            ? true
            : true
        ) ? (
          <StarIcon
            className={classNames(projectcss.all, sty.svg__aixl, {
              [sty.svgstars_five__aixlMdzsP]: hasVariant(
                $state,
                "stars",
                "five"
              ),
              [sty.svgstars_four__aixlKuD9H]: hasVariant(
                $state,
                "stars",
                "four"
              ),
              [sty.svgstars_three__aixlGVKm]: hasVariant(
                $state,
                "stars",
                "three"
              ),
              [sty.svgstars_two__aixlTjodu]: hasVariant($state, "stars", "two")
            })}
            role={"img"}
          />
        ) : null}
        {(
          hasVariant($state, "stars", "five")
            ? true
            : hasVariant($state, "stars", "four")
            ? true
            : hasVariant($state, "stars", "three")
            ? true
            : true
        ) ? (
          <StarIcon
            className={classNames(projectcss.all, sty.svg___3W7Q1, {
              [sty.svgstars_five___3W7Q1MdzsP]: hasVariant(
                $state,
                "stars",
                "five"
              ),
              [sty.svgstars_four___3W7Q1KuD9H]: hasVariant(
                $state,
                "stars",
                "four"
              ),
              [sty.svgstars_three___3W7Q1GVKm]: hasVariant(
                $state,
                "stars",
                "three"
              )
            })}
            role={"img"}
          />
        ) : null}
        {(
          hasVariant($state, "stars", "five")
            ? true
            : hasVariant($state, "stars", "four")
            ? true
            : true
        ) ? (
          <StarIcon
            className={classNames(projectcss.all, sty.svg___9T9PB, {
              [sty.svgstars_five___9T9PBmdzsP]: hasVariant(
                $state,
                "stars",
                "five"
              ),
              [sty.svgstars_four___9T9PBkuD9H]: hasVariant(
                $state,
                "stars",
                "four"
              )
            })}
            role={"img"}
          />
        ) : null}
        {(hasVariant($state, "stars", "five") ? true : true) ? (
          <StarIcon
            className={classNames(projectcss.all, sty.svg___0WNsH, {
              [sty.svgstars_five___0WNsHmdzsP]: hasVariant(
                $state,
                "stars",
                "five"
              )
            })}
            role={"img"}
          />
        ) : null}
      </p.Stack>
      {p.renderPlasmicSlot({
        defaultContents: "(45 Review)",
        value: args.numReviews,
        className: classNames(sty.slotTargetNumReviews)
      })}
    </p.Stack>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "freeBox"],
  freeBox: ["freeBox"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  freeBox: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicRatings__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicRatings__VariantsArgs;
    args?: PlasmicRatings__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicRatings__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicRatings__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicRatings__ArgProps,
          internalVariantPropNames: PlasmicRatings__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicRatings__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicRatings";
  } else {
    func.displayName = `PlasmicRatings.${nodeName}`;
  }
  return func;
}

export const PlasmicRatings = Object.assign(
  // Top-level PlasmicRatings renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    freeBox: makeNodeComponent("freeBox"),

    // Metadata about props expected for PlasmicRatings
    internalVariantProps: PlasmicRatings__VariantProps,
    internalArgProps: PlasmicRatings__ArgProps
  }
);

export default PlasmicRatings;
/* prettier-ignore-end */
